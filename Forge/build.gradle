buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
        maven { url = 'https://maven.parchmentmc.org' }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.parchmentmc:librarian:1.+'
        classpath 'org.spongepowered:mixingradle:0.7.+'
    }
}
apply plugin: 'java'
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'org.parchmentmc.librarian.forgegradle'

archivesBaseName = "${mod_name}-forge-${minecraft_version}"

//JavaDocs error with GeckoLib code as it shadows two dependencies that aren't found in the classpath, so we disable them.
javadoc.enabled(false)

minecraft {
    mappings channel: 'parchment', version: "${parchment_version}-${parchment_minecraft_version}"
    
    if (project.hasProperty('forge_ats_enabled') && project.findProperty('forge_ats_enabled').toBoolean()) {
        accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
        project.logger.debug('Forge Access Transformers are enabled for this project.')
    }

    runs {
        client {
            workingDirectory project.file('runClient')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Client'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                modClientRun {
                    source sourceSets.main
                    source project(":Common").sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('runServer')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Server'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            args "--nogui", 'true', "--singleplayer", 'yes'
            mods {
                modServerRun {
                    source sourceSets.main
                    source project(":Common").sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('runData')
            ideaModule "${rootProject.name}.${project.name}.main"
            args '--mod', 'enchanted', '--all', '--output', project(":Common").file('src/generated/resources/'),
                    '--existing', project(":Common").file('src/main/resources/')
            taskName 'Data'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                modDataRun {
                    source sourceSets.main
                    source project(":Common").sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources.srcDir 'src/generated/resources'

configurations {
    testCompileOnly.extendsFrom(compileOnly)
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    compileOnly project(":Common")

    implementation fg.deobf("software.bernie.geckolib:geckolib-forge-1.19:${geckolib_version_forge}")
    implementation fg.deobf("vazkii.patchouli:Patchouli:${patchouli_version}")
    implementation fg.deobf("net.tslat.smartbrainlib:SmartBrainLib-forge-${minecraft_version}:${sbl_version}")
    implementation fg.deobf("com.favouriteless:StateObserver-forge-${minecraft_version}:${stateobserver_version}")
    compileOnly(fg.deobf("mezz.jei:jei-${minecraft_version}-common-api:${jei_version}"))
    compileOnly(fg.deobf("mezz.jei:jei-${minecraft_version}-forge-api:${jei_version}"))
    runtimeOnly(fg.deobf("mezz.jei:jei-${minecraft_version}-forge:${jei_version}"))

    compileOnly(annotationProcessor("io.github.llamalad7:mixinextras-common:0.3.5"))
    implementation(jarJar("io.github.llamalad7:mixinextras-forge:0.3.5")) { jarJar.ranged(it, "[0.3.5,)") }
    annotationProcessor("org.spongepowered:mixin:0.8.5-SNAPSHOT:processor")
}

tasks.withType(JavaCompile) {
    source(project(":Common").sourceSets.main.allSource)
}

processResources {
    from project(":Common").sourceSets.main.resources
    filesMatching("mods.toml") {
        expand "version": project.version
    }
}

mixin {
    add sourceSets.main, "enchanted.refmap.json"
    config "enchanted.mixins.json"
    config "enchanted.forge.mixins.json"
}


jar.finalizedBy('reobfJar')


